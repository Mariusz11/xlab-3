<?php
namespace Xlab\Service;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-07-05 at 14:53:41.
 */
class ProductsSorterTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var ProductsManager
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new ProductsSorter();

    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers Xlab\ProductsManager::showProducts
     * @todo   Implement testShowProducts().
     */
    public function testSort1()
    {
        //Tworzymy produkty, wartości które mają być sprawdzone
        $product1 = new \Xlab\Product(7999, 'Warcraft 3');
        $product2 = new \Xlab\Product(5999, 'World of Warcraft');
        $product3 = new \Xlab\Product(6999, 'Diablo 3');

        $products = array($product1, $product2, $product3);

        //wywołujemy testowaną metodę
        $actual = $this->object->sort($products);


        //usuwa spacje, taby
        $actual = $actual[0]->getPrice();


        //wypisuje oczekiwany html który ma zwrócić metoda showProducts
        $expected = 5999;


        //wywołujemy test z wiadomością, w przypadku niepowodzenia
        $this->assertSame($expected, $actual, 'expected products not qual');
    }

    /**
     * @dataProvider productsOrderProvider
     */
    public function testSortwithProvider($products, $sortetProducts)
    {
        //wywołujemy testowaną metodę
        $actual = $this->object->sort($products);


        //wywołujemy test z wiadomością, w przypadku niepowodzenia
        $this->assertSame($sortetProducts, $actual, 'expected products not qual');
    }



    public function productsOrderProvider()
    {

        //Tworzymy produkty, wartości które mają być sprawdzone
        $product1 = new \Xlab\Product(4999, 'Warcraft 3');
        $product2 = new \Xlab\Product(4999, 'World of Warcraft');
        $product3 = new \Xlab\Product(4999, 'Diablo 3');

        return [
            [
                [$product1, $product2, $product3],
                [$product3, $product1, $product2]
            ],
//            [
//                [$product1, $product2, $product3],
//                [$product3, $product2, $product1]
//            ],
        ];

    }
}
